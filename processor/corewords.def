// *******************************************************************************
//
//						These are the core - core words
//
// *******************************************************************************

{{@}}
	W1 = PULLD();W1 = memory[W1]+memory[(W1+1) & 0xFFFF] * 256;PUSHD(W1);

{{c@}}
	W1 = PULLD();PUSHD(memory[W1]);

{{!}}
	W1 = PULLD();W2 = PULLD();
	memory[W1] = W2 & 0xFF;memory[(W1+1) & 0xFFFF] = (W2 >> 8) & 0xFF

{{c!}}
	W1 = PULLD();W2 = PULLD();
	memory[W1] = W2 & 0xFF

{{>r}}
	W1 = PULLD();PUSHR(W1);

{{r>}}
	W1 = PULLR();PUSHD(W1);

{{;}}
	pc = PULLR();

{{[literal]}}
	W1 = memory[pc]+memory[pc+1] * 256;pc = pc + 2;PUSHD(W1);

{{[bzero]}}
	W1 = memory[pc]+memory[pc+1] * 256;pc = pc + 2;
	W2 = PULLD();if (W2 == 0) pc = (pc + W1) & 0xFFFF;

{{[halt]}}
	pc = pc - 2;

{{[nop]}}
	;

{{+}}
	W1 = PULLD();W2 = PULLD();
	PUSHD(W1+W2);

{{nand}}
	W1 = PULLD();W2 = PULLD();
	PUSHD((W1 & W2) ^ 0xFFFF);

{{2/}}
	W1 = PULLD();
	W1 = (W1 >> 1) | (W1 & 0x8000);
	PUSHD(W1);

{{0=}}
	W1 = PULLD();
	W1 = (W1 == 0) ? 0xFFFF:0x0000;
	PUSHD(W1);

{{[temp]}}
	PUSHD(SYS_ADDR_TEMP);

{{[codebase]}}
	PUSHD(SYS_ADDR_CODEBASE);

{{[dictionary]}}
	PUSHD(SYS_ADDR_DICTBASE);

{{cursor!}}
	HWISetCursor(PULLD());

{{screen!}}
	W3 = PULLD();W2 = PULLD();W1 = PULLD();
	while ((W3 & 0xFF) != 0) {
		if (W1 >= 0 && W1 < 240) {
			memory[0x1100+W1] = memory[W2 & 0xFFFF];
			W1++;
			W2++;
		}
		W3--;
	}

{{keyboard@}}
	W1 = HWIGetKey();
	PUSHD(W1);

{{blockread@}}
	;

{{[stackreset]}}
	rSP = dSP = 0;

{{blockwrite!}}
	;

	